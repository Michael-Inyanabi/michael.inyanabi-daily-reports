{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "another-reading",
   "metadata": {},
   "source": [
    "# Question 1\n",
    "Task:\n",
    "Develop a program to find all numbers between 2000 and 3200 (inclusive) that are divisible by 7 but not multiples of 5. Display these numbers as a single line of output, separated by commas.\n",
    "\n",
    "\n",
    "This code reads numbes in between 2000 and 3200. It prints those that are divisible by 7 and not multiples of 5.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "laughing-model",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2002, 2009, 2016, 2023, 2037, 2044, 2051, 2058, 2072, 2079, 2086, 2093, 2107, 2114, 2121, 2128, 2142, 2149, 2156, 2163, 2177, 2184, 2191, 2198, 2212, 2219, 2226, 2233, 2247, 2254, 2261, 2268, 2282, 2289, 2296, 2303, 2317, 2324, 2331, 2338, 2352, 2359, 2366, 2373, 2387, 2394, 2401, 2408, 2422, 2429, 2436, 2443, 2457, 2464, 2471, 2478, 2492, 2499, 2506, 2513, 2527, 2534, 2541, 2548, 2562, 2569, 2576, 2583, 2597, 2604, 2611, 2618, 2632, 2639, 2646, 2653, 2667, 2674, 2681, 2688, 2702, 2709, 2716, 2723, 2737, 2744, 2751, 2758, 2772, 2779, 2786, 2793, 2807, 2814, 2821, 2828, 2842, 2849, 2856, 2863, 2877, 2884, 2891, 2898, 2912, 2919, 2926, 2933, 2947, 2954, 2961, 2968, 2982, 2989, 2996, 3003, 3017, 3024, 3031, 3038, 3052, 3059, 3066, 3073, 3087, 3094, 3101, 3108, 3122, 3129, 3136, 3143, 3157, 3164, 3171, 3178, 3192, 3199\n"
     ]
    }
   ],
   "source": [
    "numbers=[] # creating an empty list\n",
    "for i in range(2000, 3200):\n",
    "    if i %7==0 and i %5!=0:\n",
    "        numbers.append(str(i))\n",
    "print(\", \".join(numbers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "compound-moderator",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "duplicate-christian",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "exotic-insertion",
   "metadata": {},
   "source": [
    "# Question 2\n",
    "\n",
    "Level 1\n",
    "\n",
    "Task:\n",
    "Create a function that computes the factorial of a specified integer. Display the result in a single line of output. For example, if the input is:\n",
    "8\n",
    "Then, the output should be:\n",
    "40320\n",
    "\n",
    "This code is created to compute the factorial of a number n."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "expired-south",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter  a number n:8\n",
      "40320\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "n = eval(input(\"Enter  a number n:\"))\n",
    "facto = n*math.factorial(n-1)\n",
    "print(facto)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "packed-dragon",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "specific-buddy",
   "metadata": {},
   "source": [
    "# Question 3\n",
    "\n",
    "Level 1\n",
    "\n",
    "Task:\n",
    "Given an integer n, generate a dictionary with entries (i, i*i) for all integers from 1 to n (inclusive). Print the resulting dictionary. For example, if the input is:\n",
    "8\n",
    "Then, the output should be:\n",
    "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}\n",
    "\n",
    "The code below recieves an integer from the user. It prints a dictionary with the number of items in (1, n+1) and their corresponding squares."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "weird-accuracy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter n:5\n",
      "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n"
     ]
    }
   ],
   "source": [
    "n = eval(input(\"Enter n:\"))\n",
    "squares_dict = {}\n",
    "for i in range(1,n+1):\n",
    "    squares_dict[i] = i*i\n",
    "print(squares_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "medium-bookmark",
   "metadata": {},
   "source": [
    "# Question 4\n",
    "\n",
    "Level 1\n",
    "\n",
    "Task:\n",
    "Create a program that reads a series of comma-separated numbers from the console, then generates and prints both a list and a tuple containing those numbers. For example, if the input is:\n",
    "34,67,55,33,12,98\n",
    "The output should be: \n",
    "# ['34', '67', '55', '33', '12', '98']\n",
    "# ('34', '67', '55', '33', '12', '98')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "accompanied-shock",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a series of comma-separated numbers: 1,2,3,4\n",
      "['1', '2', '3', '4']\n",
      "('1', '2', '3', '4')\n"
     ]
    }
   ],
   "source": [
    "# Input from the user as a comma-separated string\n",
    "input_data = input(\"Enter a series of comma-separated numbers: \")\n",
    "\n",
    "# Generate a list by splitting the input string\n",
    "numbers_list = input_data.split(',')\n",
    "\n",
    "# Generate a tuple from the list\n",
    "numbers_tuple = tuple(numbers_list)\n",
    "\n",
    "# Print the list and tuple\n",
    "print(numbers_list)\n",
    "print(numbers_tuple)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
